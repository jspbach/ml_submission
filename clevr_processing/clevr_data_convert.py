# -*- coding: utf-8 -*-
"""CLEVR-Data-Processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DBlQaPFi364rPI0cW2uthsp3Vof0EOTo
"""

from typing import List, Dict
import json

class Info:
  def __init__(self, description: str, url: str, version: str, year: int, contributor: str, date_created: str):
    self.description = description
    self.url = url
    self.version = version
    self.year = year
    self.contributor = contributor
    self.date_created = date_created

  @classmethod
  def get_instance(cls):
    return cls(description = "", url = "", version = "", year = "", contributor = "", date_created = "")

class License:
  def __init__(self, url: str, name: str):
    self.url = url
    self.name = name

  @classmethod
  def get_instance(cls):
    return cls(url = "", name = "")

"""# Training & Val Data

## BasicVQA

### Basic VQA Annotation
"""

class Answer:
  def __init__(self, answer: str, answer_confidence: str, answer_id: int):
    self.answer = answer
    self.answer_confidence = answer_confidence
    self.answer_id = answer_id

  @classmethod
  def get_instance(cls):
    return cls(answer = "", answer_confidence = "", answer_id = 0)

class Annotation:
  def __init__(self, question_type: str, multiple_choice_answer: str, answers: List[Answer], image_id: int, answer_type: str, question_id: int):
    self.question_type = question_type
    self.multiple_choice_answer = multiple_choice_answer
    self.answers = answers
    self.image_id = image_id
    self.answer_type = answer_type
    self.question_id = question_id
  
  @classmethod
  def get_instance(cls):
    return cls(question_type = "", multiple_choice_answer = "", answers= [], image_id = 0, answer_type = "", question_id = 0)

class AnnotationObj:
  def __init__(self, info : Info, license: License, data_subtype: str, annotations: List[Annotation]):
    self.info = info
    self.license = license
    self.data_subtype = data_subtype
    self.annotations = annotations
  
  @classmethod
  def get_instance(cls):
    info = Info.get_instance()
    license = License.get_instance()
    return cls(info = info, license = license, data_subtype =  "", annotations = [])

"""### Basic VQA Question"""

class Question:
  def __init__(self, image_id: int, question: str, question_id: int):
    self.image_id = image_id
    self.question = question
    self.question_id = question_id
  
  @classmethod
  def get_instance(cls):
    return cls(image_id = 0, question = "", question_id = 0)

class QuestionObj:
  def __init__(self, info: Info, task_type: str, data_type: str, license: License, data_subtype: str, questions: List[Question]):
    self.info = info
    self.task_type = task_type
    self.data_type = data_type
    self.license = license
    self.data_subtype = data_subtype
    self.questions = questions
  
  @classmethod
  def get_instance(cls):
    info = Info.get_instance()
    license = License.get_instance()
    return cls(info = info, task_type = "", data_type = "", license = license, data_subtype = "", questions = [])

"""## CLEVR"""

class ClevrInfo:
    def __init__(self, split: str, license: str, version: str, date: str):
        self.split = split
        self.license = license
        self.version = version
        self.date = date

class ClevrProgram:
    def __init__(self, inputs: List[int], function: str, value_inputs: List[str]):
        self.inputs = inputs
        self.function = function
        self.value_inputs = value_inputs

class ClevrQuestion:
    def __init__(self, image_index: int, program: List[ClevrProgram], question_index: int, image_filename: str, question_family_index: int, split: str, answer: str, question: str):
        self.image_index = image_index
        self.program = program
        self.question_index = question_index
        self.image_filename = image_filename
        self.question_family_index = question_family_index
        self.split = split
        self.answer = answer
        self.question = question

class ClevrObj:
    def __init__(self, info: ClevrInfo, questions: List[ClevrQuestion]):
        self.info = info
        self.questions = questions

    @classmethod
    def from_dict(cls, data: Dict):
        info = ClevrInfo(
            split=data['info']['split'],
            license=data['info']['license'],
            version=data['info']['version'],
            date=data['info']['date']
        )
        questions = []
        for question_data in data['questions']:
            program = []
            for program_data in question_data['program']:
                program.append(ClevrProgram(
                    inputs=program_data['inputs'],
                    function=program_data['function'],
                    value_inputs=program_data['value_inputs']
                ))
            questions.append(ClevrQuestion(
                image_index=question_data['image_index'],
                program=program,
                question_index=question_data['question_index'],
                image_filename=question_data['image_filename'],
                question_family_index=question_data['question_family_index'],
                split=question_data['split'],
                answer=question_data['answer'],
                question=question_data['question']
            ))
        return cls(info=info, questions=questions)
    
    @classmethod
    def from_json(cls, json_path: str):
      with open (json_path, "r") as json_file:
        data = json.load(json_file)
        return cls.from_dict(data)

"""# Testing Data

## Basic VQA

The test file json for basic VQA is the same as the train or validation file

##CLEVR
"""

class TestClevrQuestion:
    def __init__(self, image_index: int, question_index: int, image_filename: str, split: str, question: str):
        self.image_index = image_index
        self.question_index = question_index
        self.image_filename = image_filename
        self.split = split
        self.question = question

class TestClevrObj:
    def __init__(self, info: ClevrInfo, questions: List[ClevrQuestion]):
        self.info = info
        self.questions = questions

    @classmethod
    def from_dict(cls, data: Dict):
        info = ClevrInfo(
            split=data['info']['split'],
            license=data['info']['license'],
            version=data['info']['version'],
            date=data['info']['date']
        )
        questions = []
        for question_data in data['questions']:
            questions.append(TestClevrQuestion(
                image_index=question_data['image_index'],
                question_index=question_data['question_index'],
                image_filename=question_data['image_filename'],
                split=question_data['split'],
                question=question_data['question']
            ))
        return cls(info=info, questions=questions)
    
    @classmethod
    def from_json(cls, json_path: str):
      with open (json_path, "r") as json_file:
        data = json.load(json_file)
        return cls.from_dict(data)

"""# Data processing"""

def get_question_type(question : str)->str:
  if ("What size" in question):
    return "what size"
  if ("What is" in question):
    return "what is"
  if ("How big" in question):
    return "how big"
  return "none of the above"

def clevr_to_annotation_obj(clevr_obj: ClevrObj):
  annotation_info = Info.get_instance()
  annotation_info.version = clevr_obj.info.version
  annotation_info.contributor = ""
  annotation_info.date_created = clevr_obj.info.date
  annotation_info.description = ""
  annotation_info.url = ""
  annotation_info.year = clevr_obj.info.date
  annotation_license = License.get_instance()
  annotation_license.url = clevr_obj.info.license
  annotation_license.name = clevr_obj.info.license
  annotation_obj = AnnotationObj.get_instance()
  annotation_obj.info = annotation_info
  annotation_obj.license = annotation_license
  annotation_obj.data_subtype = "clevr " + clevr_obj.info.split
  annotation_obj.annotations = []

  for question in clevr_obj.questions:
    annotation = Annotation.get_instance()
    annotation.question_type = get_question_type(question.question)
    annotation.multiple_choice_answer = "no"
    annotation.answer_type = "yes/no" if (("yes" in question.answer) or ("no" in question.answer)) else "other"
    annotation.image_id = question.image_index 
    annotation.question_id = annotation.image_id + (question.question_index % 10)
    answer = Answer.get_instance()
    answer.answer = question.answer
    answer.answer_confidence = "yes"
    answer.answer_id = 1
    annotation.answers = [answer]
    annotation_obj.annotations.append(annotation)
  return annotation_obj

def clevr_to_question_obj(clevr_obj: ClevrObj):
  question_info = Info.get_instance()
  question_info.version = clevr_obj.info.version
  question_info.contributor = ""
  question_info.date_created = clevr_obj.info.date
  question_info.description = ""
  question_info.url = ""
  question_info.year = clevr_obj.info.date
  question_license = License.get_instance()
  question_license.url = clevr_obj.info.license
  question_license.name = clevr_obj.info.license
  question_obj = QuestionObj.get_instance()
  question_obj.info = question_info
  question_obj.license = question_license 
  question_obj.questions = []
  question_obj.data_subtype = "clevr " + clevr_obj.info.split
  question_obj.data_type = "clevr"
  question_obj.task_type = "Open-Ended"

  for clevrQuestion in clevr_obj.questions:
    question = Question.get_instance()
    question.question = clevrQuestion.question
    question.image_id = clevrQuestion.image_index 
    question.question_id = question.image_id + (clevrQuestion.question_index % 10)
    question_obj.questions.append(question)
  return question_obj

def test_clevr_to_question_obj(clevr_obj: TestClevrObj):
  question_info = Info.get_instance()
  question_info.version = clevr_obj.info.version
  question_info.contributor = ""
  question_info.date_created = clevr_obj.info.date
  question_info.description = ""
  question_info.url = ""
  question_info.year = clevr_obj.info.date
  question_license = License.get_instance()
  question_license.url = clevr_obj.info.license
  question_license.name = clevr_obj.info.license
  question_obj = QuestionObj.get_instance()
  question_obj.info = question_info
  question_obj.license = question_license 
  question_obj.questions = []
  question_obj.data_subtype = "clevr " + clevr_obj.info.split
  question_obj.data_type = "clevr"
  question_obj.task_type = "Open-Ended"

  for clevrQuestion in clevr_obj.questions:
    question = Question.get_instance()
    question.question = clevrQuestion.question
    question.image_id = clevrQuestion.image_index 
    question.question_id = question.image_id + (clevrQuestion.question_index % 10)
    question_obj.questions.append(question)
  return question_obj

def annotation_obj_to_json(annotation_obj: AnnotationObj):
  info_dict = {"description": annotation_obj.info.description, "url": annotation_obj.info.url, "version": annotation_obj.info.version, "year": annotation_obj.info.year, "contributor": annotation_obj.info.contributor, "date_created": annotation_obj.info.date_created}
  license_dict = {"url": annotation_obj.license.url, "name": annotation_obj.license.name}
  annotations_list = []
  for annotation in annotation_obj.annotations:
    answers_list = []
    for answer in annotation.answers:
      answer_dict = {"answer": answer.answer, "answer_confidence": answer.answer_confidence, "answer_id": answer.answer_id}
      answers_list.append(answer_dict)
    annotation_dict = {"question_type": annotation.question_type, "multiple_choice_answer": annotation.multiple_choice_answer, "answers": answers_list, "image_id": annotation.image_id, "answer_type": annotation.answer_type, "question_id": annotation.question_id}
    annotations_list.append(annotation_dict)
  obj_dict = {"info": info_dict, "license": license_dict, "data_subtype": annotation_obj.data_subtype, "annotations": annotations_list}

  return json.dumps(obj_dict, indent = 2)

def question_obj_to_json(question_obj: QuestionObj):
  info_dict = {"description": question_obj.info.description, "url": question_obj.info.url, "version": question_obj.info.version, "year": question_obj.info.year, "contributor": question_obj.info.contributor, "date_created": question_obj.info.date_created}
  license_dict = {"url": question_obj.license.url, "name": question_obj.license.name}
  question_list = []
  for question in question_obj.questions:
    question_dict = {"image_id": question.image_id, "question": question.question, "question_id": question.question_id}
    question_list.append(question_dict)
  obj_dict = {"info": info_dict, "task_type": question_obj.task_type,"data_type":question_obj.data_type, "license": license_dict, "data_subtype": question_obj.data_subtype, "questions": question_list}
  
  return json.dumps(obj_dict, indent = 2)

# Load json objects to python objects
valClevrObj = ClevrObj.from_json("./questions/CLEVR_val_questions.json")
trainClevrObj = ClevrObj.from_json("./questions/CLEVR_train_questions.json")
testClevrObj = TestClevrObj.from_json("./questions/CLEVR_test_questions.json")

# Convert the python objects to the desired types
trainAnnotationObj = clevr_to_annotation_obj(trainClevrObj)
trainQuestionObj = clevr_to_question_obj(trainClevrObj)
valAnnotationObj = clevr_to_annotation_obj(valClevrObj)
valQuestionObj = clevr_to_question_obj(valClevrObj)
testQuestionObj = test_clevr_to_question_obj(testClevrObj)

# Convert python objects to json string
json_train_annotation_obj = annotation_obj_to_json(trainAnnotationObj)
json_val_annotation_obj = annotation_obj_to_json(valAnnotationObj)
json_train_question_obj = question_obj_to_json(trainQuestionObj)
json_val_question_obj = question_obj_to_json(valQuestionObj)
json_test_question_obj = question_obj_to_json(testQuestionObj)

# Save the json strings above to files
with open("./Annotations/CLEVR_train_annotations_converted.json", "w") as outfile:
  outfile.write(json_train_annotation_obj)
with open("./Annotations/CLEVR_val_annotations_converted.json", "w") as outfile:
  outfile.write(json_val_annotation_obj)
with open("./Questions/CLEVR_train_questions_converted.json", "w") as outfile:
  outfile.write(json_train_question_obj)
with open("./Questions/CLEVR_val_questions_converted.json", "w") as outfile:
  outfile.write(json_val_question_obj)
with open("./Questions/CLEVR_test_questions_converted.json", "w") as outfile:
  outfile.write(json_test_question_obj)
